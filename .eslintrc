{
  "root": true,
  "env": {
    "es6": true,
    "node": true
  },
  "extends": [
    "eslint:recommended",
    "plugin:import/errors",
    "plugin:import/warnings",
    "plugin:import/typescript",
    "google",
    "prettier",
    "plugin:@typescript-eslint/recommended"
  ],
  "parser": "@typescript-eslint/parser",
  "parserOptions": {
    "project": ["tsconfig.json", "tsconfig.dev.json"],
    "sourceType": "module"
  },
  "ignorePatterns": [
    "/lib/**/*" // Ignore built files.
  ],
  "plugins": [
    "@typescript-eslint",
    "import",
    "node",
    "eslint-plugin-import",
		"eslint-plugin-prefer-arrow",
		"prettier"
  ],
  "settings": {
		"import/extensions": [".js", ".jsx", ".ts", ".tsx", ".d.ts"],
		"import/parsers": {
			"@typescript-eslint/parser": [".ts", ".tsx"]
		},
		"import/resolver": {
			"node": {
				"extensions": [".js", ".jsx", ".ts", ".tsx", ".d.ts"]
			}
		}
	},
  "rules": {
		/* Prettier */
		"prettier/prettier": ["warn", {
			"singleQuote": true,
			"endOfLine": "auto",
			"printWidth": 80,
			"useTabs": false,
			"semi": true
		}],

		"no-process-exit": "off",

		/* ESLint */
		"arrow-body-style": "off",
		"comma-dangle": "off",
		"eqeqeq": ["error", "smart"],
		"func-names": ["error", "as-needed"],
		"indent": "off", // it's resolved by Prettier
		"max-classes-per-file": ["error", 1],
		"max-len": "off", // it's resolved by Prettier
		"multiline-ternary": "off", // it's resolved by Prettier
		"new-parens": "error",
		"no-bitwise": "error",
		"no-console": ["error", { "allow": ["warn", "error", "info"] }],
		"no-caller": "error",
		"no-duplicate-imports": "error",
		"no-empty-function": "off",
		"no-eval": "error",
		"no-extra-bind": "error",
		"no-extra-boolean-cast": "error",
		"no-mixed-spaces-and-tabs": ["error", "smart-tabs"],
		"no-multiple-empty-lines": ["error", { "max": 2 }],
		"no-new-func": "error",
		"no-new-wrappers": "error",
		"no-prototype-builtins": "off",
		"no-return-await": "error",
		"no-sequences": "error",
		"no-shadow": "off", // it moved to ts section
		"no-tabs": "off",
		"no-template-curly-in-string": "error",
		"no-throw-literal": "error",
		"no-trailing-spaces": "error",
		"no-undef-init": "error",
		"no-unused-vars": "off", // it moved to ts section
		"no-useless-constructor": "off",
		"no-use-before-define": "off", // it moved to ts section
		"no-var": "error",
		"object-shorthand": ["error", "always"],
		"one-var": ["error", "never"],
		"one-var-declaration-per-line": "error",
		"prefer-arrow-callback": "off",
		"prefer-const": "error",
		"prefer-object-spread": "error",
		"quotes": "off", // it moved to ts section
		"radix": "error",
		"space-in-parens": ["error", "never"],
		"spaced-comment": ["error", "always", { "markers": ["/"] }],
		"template-curly-spacing": ["error", "never"],
		"vars-on-top": "warn",

		/* From TSLint */
		"@typescript-eslint/adjacent-overload-signatures": "error",
		"@typescript-eslint/array-type": ["error", { "default": "array-simple" }],
		"@typescript-eslint/ban-ts-comment": "warn",
		"@typescript-eslint/ban-types": ["error", {
			"types": {
				"Object": {
					"message": "Avoid using the `Object` type. Did you mean `Record<string, unknown>`?",
					"fixWith": "Record<string, unknown>"
				},
				"{}": {
					"message": "Avoid using the `{}` type. Did you mean `Record<string, unknown>`?",
					"fixWith": "Record<string, unknown>"
				},
				"Function": {
					"message": "Avoid using the `Function` type. Prefer a specific function type, like `() => void`.",
					"fixWith": "() => void"
				},
				"Boolean": {
					"message": "Avoid using the `Boolean` type. Did you mean `boolean`?",
					"fixWith": "boolean"
				},
				"Number": {
					"message": "Avoid using the `Number` type. Did you mean `number`?",
					"fixWith": "number"
				},
				"String": {
					"message": "Avoid using the `String` type. Did you mean `string`?",
					"fixWith": "string"
				},
				"Symbol": {
					"message": "Avoid using the `Symbol` type. Did you mean `symbol`?",
					"fixWith": "symbol"
		}}}],
		"@typescript-eslint/comma-dangle": ["error", "only-multiline", {
			"arrays": "only-multiline",
			"objects": "only-multiline",
			"imports": "only-multiline",
			"exports": "only-multiline",
			"functions": "never"
		}],
		"@typescript-eslint/explicit-function-return-type": "off", // it will be checked by TSC
		"@typescript-eslint/explicit-module-boundary-types": "off",
		"@typescript-eslint/indent": "off", // it's resolved by Prettier
		"@typescript-eslint/no-explicit-any": ["error", { "ignoreRestArgs": true }],
		"@typescript-eslint/no-empty-function": "off",
		"@typescript-eslint/no-empty-interface": "off",
		// "@typescript-eslint/no-shadow": ["error", {
		// 	"builtinGlobals": false,
		// 	"hoist": "functions",
		// 	"allow": []
		// }],
		"@typescript-eslint/no-unused-expressions": ["error", { "allowShortCircuit": true }],
		"@typescript-eslint/no-unused-vars": ["warn", {
				"ignoreRestSiblings": true
		}],
		/*
			Vova: we should use this rule not eslint,
			because eslint doesn't know about ts features like
			define private fields by arguments
		*/
		"@typescript-eslint/no-useless-constructor": "error",
		"@typescript-eslint/no-use-before-define": ["error", { "functions": false }],
		"@typescript-eslint/no-var-requires": "off",
		"@typescript-eslint/prefer-for-of": "error",
		"@typescript-eslint/prefer-function-type": "error",
		"@typescript-eslint/quotes": ["warn", "single", { "avoidEscape": true }],
		"@typescript-eslint/triple-slash-reference": ["error", {
			"path": "always",
			"types": "prefer-import",
			"lib": "always"
		}],
		"@typescript-eslint/unified-signatures": "error",
		"@typescript-eslint/no-non-null-assertion": "off",

		/* Node */
		"node/no-missing-import": ["warn", { "tryExtensions": [".js", ".ts", ".tsx", ".d.ts"] }],
		"node/no-missing-require": ["error", {
			"tryExtensions": [".js", ".json", ".node", ".ts"]
		}],
		"node/no-unsupported-features": "off",
		"node/no-unsupported-features/es-syntax": ["error", {
			"version": "=14.17.4",
			"ignores": ["modules", "dynamicImport"]
		}],
		"node/no-unpublished-import": ["error", {
			"allowModules": ["playwright", "chai", "chai-string", "chai-images", "bull"]
		}],
		"node/no-unpublished-require": "off",

		/* Other */
		"import/extensions": ["error", "ignorePackages", {
			"js": "never",
			"jsx": "never",
			"ts": "never",
			"tsx": "never",
			"d.ts": "never"
		}],
		"import/no-default-export": "warn",
		"import/no-extraneous-dependencies": ["error", {
			"devDependencies": ["**/*.test.ts"]
		}],
		"import/order": "off",
		"prefer-arrow/prefer-arrow-functions": ["off", {
			"disallowPrototype": false,
			"singleReturnOnly": false,
			"classPropertiesAllowed": false
		}],
		"require-jsdoc": "off"
	},
	"overrides": [
		{
			"files": ["*.test.*", "*.stories.tsx"],
			"rules": {
				"import/no-extraneous-dependencies": "off",
				"node/no-unpublished-import": "off"
			}
		}
	],
	"globals": {
		"after": true,
		"before": true,
		"beforeAll": true,
		"beforeEach": true,
		"describe": true,
		"protractor": true,
		"it": true
	}
}
